
%prefix "pug_parser"

statement <- _ e:expression _ EOL { printf("answer=%d\n", e); }
           / ( !EOL . )* EOL      { printf("error\n"); }

expression <- e:term { $$ = e; }

term <- l:term _ '+' _ r:factor { pug_parser_on_operation('+', l, r); $$ = l + r; }
      / l:term _ '-' _ r:factor { pug_parser_on_operation('-', l, r); $$ = l - r; }
      / e:factor                { $$ = e; }

factor <- l:factor _ '*' _ r:unary { pug_parser_on_operation('*', l, r); $$ = l * r; }
        / l:factor _ '/' _ r:unary { pug_parser_on_operation('/', l, r); $$ = l / r; }
        / e:unary                  { $$ = e; }

unary <- '+' _ e:unary { $$ = +e; }
       / '-' _ e:unary { $$ = -e; }
       / e:primary     { $$ = e; }

primary <- < [0-9]+ >               { $$ = atoi($1); }
         / '(' _ e:expression _ ')' { $$ = e; }

_      <- [ \t]*
EOL    <- '\n' / '\r\n' / '\r' / ';'

%header {
  void pug_parser_on_operation(char, int, int);
}

