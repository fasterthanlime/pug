
%prefix "pug_parser"

Module <- (WS ModuleCore WS)+
        / ( !EOL . )* EOL { printf("Error happened at %d: \n%s\n", (int) $0e, $0); }

ModuleCore <- FuncDecl

FuncDecl <- _ 'def' _ name:ID { pug_parser_on_function_start(auxil, name);  }
  _ ArgList? WS EOL Scope? EOL 'end' WS { pug_parser_on_function_end(auxil);  }

ArgList <- '(' WS (Arg (WS ',' WS Arg)*)? WS ')'
Arg <- name: ID { pug_parser_on_argument(auxil, name); }

Scope <- (WS e:Expression)*

Expression <- t:Term { $$ = t; }

Term <- l:Term _ '+' _ r:Factor
      / l:Term _ '-' _ r:Factor
      / e:Factor

Factor <- l:Factor _ '*' _ r:Unary
        / l:Factor _ '/' _ r:Unary
        / e:Unary

Unary <- '+' _ e:Unary
       / '-' _ e:Unary
       / e:Primary

Primary <- < [0-9]+ >
         / name:ID
         / '(' e:Expression ')'

# utils

ID <- < [a-zA-Z0-9_]+ > { $$ = pug_parser_strdup((void*) $1);  }
_      <- [ \t]*
WS <- ([ \t] / EOL)*
EOL    <- '\n' / '\r\n' / '\r' / ';'

%value "void*"

%header {
  void* pug_parser_strdup(void *);
  void* pug_parser_on_operation(void *, char, int, int);
  void* pug_parser_on_function_start(void *, char *name);
  void* pug_parser_on_argument(void *, char *name);
  void* pug_parser_on_function_end(void *);
}


